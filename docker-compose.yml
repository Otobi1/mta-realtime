version:  '3.8'
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ZOO_ENABLE_AUTH=no
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - mta-stream-network

  kafka:
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    networks:
      - mta-stream-network

  spark:
    image: bitnami/spark:latest
    depends_on:
      - kafka
      - postgres
      - elasticsearch
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      - SPARK_MASTER_LOG=/opt/bitnami/spark/logs
      - SPARK_WORKER_LOG=/opt/bitnami/spark/logs
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_PORT=7077
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_WORKER_INSTANCES=1
      - SPARK_WORKER_DIR=/opt/bitnami/spark/work
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"
    volumes:
      - ./spark_jobs:/opt/spark/jobs
      - ./python_app/jars:/opt/spark/jars
    networks:
      - mta-stream-network

  postgres:
    image: bitnami/postgresql:13
    environment:
      POSTGRESQL_USERNAME: ${POSTGRES_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mta-stream-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - mta-stream-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.2
    container_name: kibana
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - mta-stream-network

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
      - postgres
    environment:
      - MTA_API_KEY=${MTA_API_KEY}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - TOPIC_NAME=${TOPIC_NAME}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - ./static_data:/app/static_data

  static_parser:
    build: ./static_parser
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./static_data:/app/static_data
    networks:
      - mta-stream-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - postgres
      - elasticsearch
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  esdata:
  grafana_data:

networks:
  mta-stream-network:
    driver: bridge